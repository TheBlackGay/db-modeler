<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.db.modeler.repository.TableRelationMapper">
    
    <!-- 结果映射 -->
    <resultMap id="TableRelationMap" type="com.db.modeler.entity.TableRelation">
        <id property="id" column="id"/>
        <result property="projectId" column="project_id"/>
        <result property="sourceTableId" column="source_table_id"/>
        <result property="targetTableId" column="target_table_id"/>
        <result property="relationType" column="relation_type"/>
        <result property="description" column="description"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <collection property="columnMappings" ofType="com.db.modeler.entity.TableRelation$ColumnMapping"
                    select="selectColumnMappings" column="id"/>
    </resultMap>

    <!-- 列映射结果映射 -->
    <resultMap id="ColumnMappingMap" type="com.db.modeler.entity.TableRelation$ColumnMapping">
        <result property="sourceColumnId" column="source_column_id"/>
        <result property="targetColumnId" column="target_column_id"/>
        <result property="mappingType" column="mapping_type"/>
    </resultMap>

    <!-- 基础列 -->
    <sql id="Base_Column_List">
        id, project_id, source_table_id, target_table_id, relation_type, description, created_at, updated_at
    </sql>

    <!-- 插入表关系 -->
    <insert id="insert" parameterType="com.db.modeler.entity.TableRelation">
        INSERT INTO table_relations (
            id, project_id, source_table_id, target_table_id, relation_type, description, created_at, updated_at
        ) VALUES (
            #{id}, #{projectId}, #{sourceTableId}, #{targetTableId}, #{relationType}, #{description}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <!-- 插入列映射 -->
    <insert id="insertColumnMapping">
        INSERT INTO table_relation_column_mappings (
            relation_id, source_column_id, target_column_id, mapping_type
        ) VALUES (
            #{relationId}, #{mapping.sourceColumnId}, #{mapping.targetColumnId}, #{mapping.mappingType}
        )
    </insert>

    <!-- 更新表关系 -->
    <update id="update" parameterType="com.db.modeler.entity.TableRelation">
        UPDATE table_relations
        SET project_id = #{projectId},
            source_table_id = #{sourceTableId},
            target_table_id = #{targetTableId},
            relation_type = #{relationType},
            description = #{description},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- 查询表关系 -->
    <select id="selectById" resultMap="TableRelationMap">
        SELECT <include refid="Base_Column_List"/>
        FROM table_relations
        WHERE id = #{id}
    </select>

    <!-- 查询列映射 -->
    <select id="selectColumnMappings" resultMap="ColumnMappingMap">
        SELECT source_column_id, target_column_id, mapping_type
        FROM table_relation_column_mappings
        WHERE relation_id = #{relationId}
    </select>

    <!-- 根据项目ID查询表关系 -->
    <select id="selectByProjectId" resultMap="TableRelationMap">
        SELECT <include refid="Base_Column_List"/>
        FROM table_relations
        WHERE project_id = #{projectId}
    </select>

    <!-- 根据源表ID查询表关系 -->
    <select id="selectBySourceTableId" resultMap="TableRelationMap">
        SELECT <include refid="Base_Column_List"/>
        FROM table_relations
        WHERE source_table_id = #{sourceTableId}
    </select>

    <!-- 根据目标表ID查询表关系 -->
    <select id="selectByTargetTableId" resultMap="TableRelationMap">
        SELECT <include refid="Base_Column_List"/>
        FROM table_relations
        WHERE target_table_id = #{targetTableId}
    </select>

    <!-- 查询与指定表相关的所有关系 -->
    <select id="selectByTableId" resultMap="TableRelationMap">
        SELECT <include refid="Base_Column_List"/>
        FROM table_relations
        WHERE source_table_id = #{tableId} OR target_table_id = #{tableId}
    </select>

    <!-- 查询两个表之间的关系 -->
    <select id="selectRelationsBetweenTables" resultMap="TableRelationMap">
        SELECT <include refid="Base_Column_List"/>
        FROM table_relations
        WHERE (source_table_id = #{table1Id} AND target_table_id = #{table2Id})
           OR (source_table_id = #{table2Id} AND target_table_id = #{table1Id})
    </select>

    <!-- 根据项目ID和关系类型查询表关系 -->
    <select id="selectByProjectIdAndRelationType" resultMap="TableRelationMap">
        SELECT <include refid="Base_Column_List"/>
        FROM table_relations
        WHERE project_id = #{projectId} AND relation_type = #{relationType}
    </select>

    <!-- 删除表关系 -->
    <delete id="deleteById">
        DELETE FROM table_relations WHERE id = #{id}
    </delete>

    <!-- 删除列映射 -->
    <delete id="deleteColumnMappings">
        DELETE FROM table_relation_column_mappings WHERE relation_id = #{relationId}
    </delete>

    <!-- 删除项目的所有关系 -->
    <delete id="deleteByProjectId">
        DELETE FROM table_relations WHERE project_id = #{projectId}
    </delete>

    <!-- 删除指定表的所有关系 -->
    <delete id="deleteByTableId">
        DELETE FROM table_relations 
        WHERE source_table_id = #{tableId} OR target_table_id = #{tableId}
    </delete>
</mapper>
